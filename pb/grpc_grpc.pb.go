// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetCoinClient is the client API for GetCoin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetCoinClient interface {
	// Gets list of all coins on CoinGecko and compares to cache. If cached data is older than 24h
	// then Coins will replace old cached data with updated coins list.
	Coins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CoinListResponse, error)
	// Gets current market price of a specified coin compared to usd within the range of the requested amount of days
	// example: https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=5
	// if cached data is older that 15 minutes, will cache updated prices during request.
	CoinPrice(ctx context.Context, in *MarketPriceRequest, opts ...grpc.CallOption) (*MarketPriceResponse, error)
}

type getCoinClient struct {
	cc grpc.ClientConnInterface
}

func NewGetCoinClient(cc grpc.ClientConnInterface) GetCoinClient {
	return &getCoinClient{cc}
}

func (c *getCoinClient) Coins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CoinListResponse, error) {
	out := new(CoinListResponse)
	err := c.cc.Invoke(ctx, "/ctrackergrpc.GetCoin/Coins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getCoinClient) CoinPrice(ctx context.Context, in *MarketPriceRequest, opts ...grpc.CallOption) (*MarketPriceResponse, error) {
	out := new(MarketPriceResponse)
	err := c.cc.Invoke(ctx, "/ctrackergrpc.GetCoin/CoinPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetCoinServer is the server API for GetCoin service.
// All implementations must embed UnimplementedGetCoinServer
// for forward compatibility
type GetCoinServer interface {
	// Gets list of all coins on CoinGecko and compares to cache. If cached data is older than 24h
	// then Coins will replace old cached data with updated coins list.
	Coins(context.Context, *Empty) (*CoinListResponse, error)
	// Gets current market price of a specified coin compared to usd within the range of the requested amount of days
	// example: https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=5
	// if cached data is older that 15 minutes, will cache updated prices during request.
	CoinPrice(context.Context, *MarketPriceRequest) (*MarketPriceResponse, error)
	mustEmbedUnimplementedGetCoinServer()
}

// UnimplementedGetCoinServer must be embedded to have forward compatible implementations.
type UnimplementedGetCoinServer struct {
}

func (UnimplementedGetCoinServer) Coins(context.Context, *Empty) (*CoinListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Coins not implemented")
}
func (UnimplementedGetCoinServer) CoinPrice(context.Context, *MarketPriceRequest) (*MarketPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinPrice not implemented")
}
func (UnimplementedGetCoinServer) mustEmbedUnimplementedGetCoinServer() {}

// UnsafeGetCoinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetCoinServer will
// result in compilation errors.
type UnsafeGetCoinServer interface {
	mustEmbedUnimplementedGetCoinServer()
}

func RegisterGetCoinServer(s grpc.ServiceRegistrar, srv GetCoinServer) {
	s.RegisterService(&GetCoin_ServiceDesc, srv)
}

func _GetCoin_Coins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetCoinServer).Coins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctrackergrpc.GetCoin/Coins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetCoinServer).Coins(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetCoin_CoinPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetCoinServer).CoinPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctrackergrpc.GetCoin/CoinPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetCoinServer).CoinPrice(ctx, req.(*MarketPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetCoin_ServiceDesc is the grpc.ServiceDesc for GetCoin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetCoin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ctrackergrpc.GetCoin",
	HandlerType: (*GetCoinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Coins",
			Handler:    _GetCoin_Coins_Handler,
		},
		{
			MethodName: "CoinPrice",
			Handler:    _GetCoin_CoinPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
