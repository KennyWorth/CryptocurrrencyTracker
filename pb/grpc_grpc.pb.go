// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetAllCoinsClient is the client API for GetAllCoins service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetAllCoinsClient interface {
	Coins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CoinResponse, error)
}

type getAllCoinsClient struct {
	cc grpc.ClientConnInterface
}

func NewGetAllCoinsClient(cc grpc.ClientConnInterface) GetAllCoinsClient {
	return &getAllCoinsClient{cc}
}

func (c *getAllCoinsClient) Coins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CoinResponse, error) {
	out := new(CoinResponse)
	err := c.cc.Invoke(ctx, "/ctrackergrpc.GetAllCoins/Coins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetAllCoinsServer is the server API for GetAllCoins service.
// All implementations must embed UnimplementedGetAllCoinsServer
// for forward compatibility
type GetAllCoinsServer interface {
	Coins(context.Context, *Empty) (*CoinResponse, error)
	mustEmbedUnimplementedGetAllCoinsServer()
}

// UnimplementedGetAllCoinsServer must be embedded to have forward compatible implementations.
type UnimplementedGetAllCoinsServer struct {
}

func (UnimplementedGetAllCoinsServer) Coins(context.Context, *Empty) (*CoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Coins not implemented")
}
func (UnimplementedGetAllCoinsServer) mustEmbedUnimplementedGetAllCoinsServer() {}

// UnsafeGetAllCoinsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetAllCoinsServer will
// result in compilation errors.
type UnsafeGetAllCoinsServer interface {
	mustEmbedUnimplementedGetAllCoinsServer()
}

func RegisterGetAllCoinsServer(s grpc.ServiceRegistrar, srv GetAllCoinsServer) {
	s.RegisterService(&GetAllCoins_ServiceDesc, srv)
}

func _GetAllCoins_Coins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetAllCoinsServer).Coins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctrackergrpc.GetAllCoins/Coins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetAllCoinsServer).Coins(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GetAllCoins_ServiceDesc is the grpc.ServiceDesc for GetAllCoins service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetAllCoins_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ctrackergrpc.GetAllCoins",
	HandlerType: (*GetAllCoinsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Coins",
			Handler:    _GetAllCoins_Coins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
